#!/bin/bash
set -eo pipefail

platform="amd64"
os="linux"
auth_uri="https://auth.docker.io/token?service=registry.docker.io&scope=repository"
registry_uri="https://registry-1.docker.io/v2"
images_path="$HOME/.socker/images"

function die(){
    echo "Error: $1" 1>&2
    exit 1
}

function help(){
    cat << "EOF"
                               /$$                          
                              | $$                          
  /$$$$$$$  /$$$$$$   /$$$$$$$| $$   /$$  /$$$$$$   /$$$$$$ 
 /$$_____/ /$$__  $$ /$$_____/| $$  /$$/ /$$__  $$ /$$__  $$
|  $$$$$$ | $$  \ $$| $$      | $$$$$$/ | $$$$$$$$| $$  \__/
 \____  $$| $$  | $$| $$      | $$_  $$ | $$_____/| $$      
 /$$$$$$$/|  $$$$$$/|  $$$$$$$| $$ \  $$|  $$$$$$$| $$      
|_______/  \______/  \_______/|__/  \__/ \_______/|__/ 

EOF
    echo "   *---------- Usage: socker pull|push|run <repo>/<image>:<tag> <command>"
    exit 0
}

function image_get_token(){
    local repo="$1"
    local url="$auth_uri:$repo:pull"
    curl -s "$url" | jq -r '.token'
} 
function image_get_push_token(){
    local repo="$1"
    local url="$auth_uri:$repo:pull,push"

    curl -s -u "$DOCKER_USERNAME:$DOCKER_PASSWORD"  "$url" | jq -r '.token'
}

function image_get_manifest(){
    local api="application/vnd.docker.distribution.manifest.v2+json"
    local apil="application/vnd.docker.distribution.manifest.list.v2+json"
    local apii="application/vnd.oci.image.manifest.v1+json"
    local url="$registry_uri/$1/manifests/$2"
    
    local resp=$(curl -H "Accept: ${apil}" -H "Accept: ${api}" -H "Accept: ${apii}" -H "Authorization: Bearer $3" -s "$url")
 
    if echo $resp | jq -e '.errors' > /dev/null; then
        die "Image $repo:$tag doesn't exist!"
    fi

    echo "$resp"
}

function image_get_blob(){
    local api="application/vnd.oci.image.manifest.v1+json"
    local url="$registry_uri/$1/blobs/$2"

    echo "Downloading blob: ${2#sha256:}"
    curl -L -H "Accept: ${api}" -H "Authorization: Bearer $3" -s "$url" > "$4"
}


function image_put_blob(){
    local url="$registry_uri/$1/blobs/uploads"
    local size=$(stat -c%s "$3")
    local digest=sha256:$(sha256sum $3 | cut -d ' ' -f1)
    # get upload url
    local location=$(curl  -X POST -si -H "Authorization: Bearer $2" "$url/" | grep location | sed 's/^location: //' | tr -d ' ' | tr -d '\r')

    # upload file
    curl -X PUT -s -H "Authorization: Bearer $2" -H "Content-Type: application/octet-stream" -H "Content-Length: $size" --data-binary @"$3" "$location&digest=$digest"

    # validate
    curl -s -H "Authorization: Bearer $2" "$registry_uri/$1/blobs/$digest"

    echo "$digest,$size"
}

function image_put(){
    local url="$registry_uri/$1/manifests/$3"
    echo "Uploading '$1:$3'"
    local layer=$(image_put_blob "$1" "$2" "$tarball_path")
    local config=$(image_put_blob "$1" "$2" "$config_path")

    local manifest='{
    "schemaVersion": 2,
    "mediaType": "application/vnd.docker.distribution.manifest.v2+json",
    "config": {
        "mediaType": "application/vnd.docker.container.image.v1+json",
        "digest": "'$(echo $config | cut -f1 -d,)'"
    },
    "layers": [
        {
            "mediaType": "application/vnd.docker.image.rootfs.diff.tar.gzip",
            "digest": "'$(echo $layer | cut -f1 -d,)'",
            "size": '$(echo $config | cut -f2 -d,)'
        }
    ]
    }'

    curl -X PUT -s -H "Authorization: Bearer $2" -H "Content-Type: application/vnd.docker.distribution.manifest.v2+json" --data "$manifest" "$url"
}

function socker_pull(){
    local repo=${1%*:*}
    local tag=${1#*:*}
    local image_path="$images_path/$repo/$tag"

    [[ $1 =~ ^[a-z0-9_-]+/[a-z0-9_-]+:[a-z0-9_-]+$ ]] || help
    [ ! -d "$image_path" ] || die "Image already downloaded in $image_path"
    
    local token=$(image_get_token "$repo")
    local resp=$(image_get_manifest "$repo" "$tag" "$token")
    
    if echo $resp | jq -e 'has("manifests")' > /dev/null; then
        local digest=$(echo $resp | jq -r ".manifests | .[] | select(.platform.architecture == \"${platform}\" and .platform.os == \"${os}\") | .digest")
        resp=$(image_get_manifest "$repo" "$digest" "$token")
    fi
    mkdir -p "$image_path/rootfs"
    echo "$resp" > $image_path/manifest.json
    echo "Downloading to: $image_path"
    # get config
    image_get_blob $repo $(echo $resp | jq -r '.config.digest') "$token" $image_path/config.json
    
    echo $resp | jq -r '.layers[] | .digest' | while read l; do
        image_get_blob "$repo" "$l" "$token" $image_path/layer.tar
        tar xfz $image_path/layer.tar -C $image_path/rootfs
        rm $image_path/layer.tar
    done;

}

function socker_push(){
    local repo=${1%*:*}
    local tag=${1#*:*}
    local image_path="$images_path/$repo/$tag"
    local tarball_path="$image_path/rootfs.tar.gz"
    local tarball_uncompressed_path="$image_path/rootfs.tar"
    local config_path="$image_path/config.json"

    [[ $1 =~ ^[a-z0-9_-]+/[a-z0-9_-]+:[a-z0-9_-]+$ ]] || help
    [ -d "$image_path" ] || die "No filesystem found in: $image_path"
    [ -z "$DOCKER_USERNAME" -o -z "$DOCKER_PASSWORD" ] && die "DOCKER_USERNAME or DOCKER_PASSWORD not set!"

    tar -czf $tarball_path -C $image_path/rootfs .
    # config need a sha256sum from uncompressed tar, while manifest need it from a compressed tar.
    tar -cf $tarball_uncompressed_path -C $image_path/rootfs .
    local tarball_digest=$(sha256sum $tarball_uncompressed_path | cut -d ' ' -f1)
    rm $tarball_uncompressed_path
    if [ ! -f $config_path ];then
        config="{
            \"architecture\": \"$platform\",
            \"config\": {
                \"Env\": [
                    \"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"
                ],
                \"Cmd\": [
                    \"/bin/sh\"
                ]
            },
            \"os\": \"$os\",
            \"rootfs\": {
                \"type\": \"layers\",
                \"diff_ids\": [
                    \"sha256:$tarball_digest\"
                ]
            }
        }
        "
        echo -e "$config" > $config_path

    else
        echo $(jq ".rootfs.diff_ids |= [\"$tarball_digest\"]" $config_path) > $config_path 
    fi
    
    image_put $repo "$(image_get_push_token $repo)" $tag

}

function socker_run(){
    local repo=${1%*:*}
    local tag=${1#*:*}
    local image_path="$images_path/$repo/$tag"

    [ ! -d "$image_path/rootfs" ] && socker_pull "$1"
    
    [ -d "$image_path/rootfs/etc" ] && echo "nameserver 8.8.8.8" > $image_path/rootfs/etc/resolv.conf
    
    [ -d "$image_path/rootfs/tmp" ] && chmod 1777 $image_path/rootfs/tmp
    
    local hostname=$(echo $repo | cut -f2 -d/)
    cd $image_path
    sudo -E unshare  --uts --mount --pid --ipc --fork bash -c "
    # needed by pivot_root
    mount --bind rootfs rootfs
    # enter root filesystem
    cd rootfs
    # old root will be mounted by pivot_root
    mkdir -p oldroot

    # set new root
    pivot_root . oldroot
    # set PATH
    PATH=/bin:/usr/bin:/sbin:/usr/sbin

    # mount /proc
    mount -t proc proc /proc
    #mount /sys
    mount -t sysfs sys /sys

    # mount /dev
    mount -t devtmpfs none /dev
    #mount /dev/pts
    mkdir -p /dev/pts
    mount -t devpts devpts /dev/pts

    # unmount oldroot, so it can be removed 
    umount -l oldroot
    # remove oldroot
    rmdir oldroot

    hostname "$hostname"

    # Run the indended process using same process id
    exec ${@:2}
    "
}

if ! command -v jq &> /dev/null; then
    die "jq is not installed!"
fi

case $1 in 
    pull|push|run) socker_"$1" "${@:2}" ;;
    *) help ;;
esac